var searchIndex = JSON.parse('{\
"hrpc":{"doc":"","i":[[3,"Client","hrpc","Generic client implementation with common methods.",null,null],[3,"Socket","","A websocket, wrapped for ease of use with protobuf messages.",null,null],[4,"ClientError","","Errors that can occur within [`Client`] operation.",null,null],[13,"Reqwest","","Occurs if reqwest, the HTTP client, returns an error.",0,null],[13,"EndpointError","","Occurs if an endpoint returns an error.",0,null],[12,"raw_error","hrpc::ClientError","",1,null],[12,"status","","",1,null],[12,"endpoint","","",1,null],[13,"SocketError","hrpc","Occurs if a websocket returns an error.",0,null],[13,"MessageDecode","","Occurs if the data server responded with can\'t be decoded…",0,null],[13,"NonProtobuf","","Occurs if the data server responded with isn\'t a protobuf…",0,null],[13,"InvalidUrl","","Occurs if the given URL is invalid.",0,null],[4,"InvalidUrlKind","","",null,null],[13,"InvalidScheme","","",2,null],[4,"SocketMessage","","A message returned from the [`Socket::get_message()`]…",null,null],[13,"Protobuf","","A protobuf message.",3,null],[13,"Text","","A text message.",3,null],[13,"Ping","","A ping, should be responded with a pong.",3,null],[13,"Pong","","A pong.",3,null],[6,"ClientResult","","Convenience type for [`Client`] operation result.",null,null],[11,"new","","Creates a new client.",4,[[["client",3],["url",3]],["clientresult",6]]],[11,"set_auth_token","","Sets the authorization token of this client.",4,[[["option",4],["string",3]]]],[11,"make_request","","Makes a unary request from a protobuf message and the…",4,[[],[["request",3],["clientresult",6]]]],[11,"execute_request","","Executes an unary request returns the decoded response.",4,[[["request",3]]]],[11,"connect_socket","","",4,[[]]],[11,"send_message","","Send a protobuf message over the websocket.",5,[[]]],[11,"get_message","","Get a message from the websocket.",5,[[]]],[11,"ping","","Sends a \\\"ping\\\" message over the websocket and returns the…",5,[[]]],[11,"close","","Close and drop this websocket.",5,[[]]],[14,"include_proto","","Include generated proto server and client items.",null,null],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_string","","",0,[[],["string",3]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",0,[[["error",3]]]],[11,"from","","",0,[[["decodeerror",3]]]],[11,"from","","",0,[[["error",4]]]],[11,"clone","","",4,[[],["client",3]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",3,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]]],"p":[[4,"ClientError"],[13,"EndpointError"],[4,"InvalidUrlKind"],[4,"SocketMessage"],[3,"Client"],[3,"Socket"]]},\
"hrpc_build":{"doc":"","i":[[3,"Builder","hrpc_build","Service generator builder.",null,null],[5,"compile_protos","","Simple `.proto` compiling. Use [`configure`] instead if…",null,[[],["result",6]]],[5,"configure","","Configure `tonic-build` code generation.",null,[[],["builder",3]]],[5,"fmt","","Format files under the out_dir with rustfmt",null,[[]]],[11,"build_client","","Enable or disable gRPC client code generation.",0,[[]]],[11,"build_server","","Enable or disable gRPC server code generation.",0,[[]]],[11,"format","","Enable the output to be formated by rustfmt.",0,[[]]],[11,"out_dir","","Set the output directory to generate code to.",0,[[]]],[11,"extern_path","","Declare externally provided Protobuf package or type.",0,[[]]],[11,"field_attribute","","Add additional attribute to matched messages, enums, and…",0,[[["asref",8]]]],[11,"type_attribute","","Add additional attribute to matched messages, enums, and…",0,[[["asref",8]]]],[11,"proto_path","","Set the path to where tonic will search for the…",0,[[]]],[11,"compile","","Compile the .proto files and execute code generation.",0,[[],["result",6]]],[11,"compile_with_config","","Compile the .proto files and execute code generation using…",0,[[["config",3]],["result",6]]],[0,"client","","Service code generation for client",null,null],[5,"generate","hrpc_build::client","Generate service for client.",null,[[],["tokenstream",3]]],[8,"Service","hrpc_build","Service generation trait.",null,null],[18,"CODEC_PATH","","Path to the codec.",1,null],[16,"Comment","","Comment type.",1,null],[16,"Method","","Method type.",1,null],[10,"name","","Name of service.",1,[[]]],[10,"package","","Package name of service.",1,[[]]],[10,"identifier","","Identifier used to generate type name.",1,[[]]],[10,"methods","","Methods provided by service.",1,[[]]],[10,"comment","","Get comments about this item.",1,[[]]],[8,"Method","","Method generation trait.",null,null],[18,"CODEC_PATH","","Path to the codec.",2,null],[16,"Comment","","Comment type.",2,null],[10,"name","","Name of method.",2,[[]]],[10,"identifier","","Identifier used to generate type name.",2,[[]]],[10,"client_streaming","","Method is streamed by client.",2,[[]]],[10,"server_streaming","","Method is streamed by server.",2,[[]]],[10,"comment","","Get comments about this item.",2,[[]]],[10,"options","","Get options of this item.",2,[[],["vec",3]]],[10,"request_response_name","","Type name of request and response.",2,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"clone","","",0,[[],["builder",3]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]]],"p":[[3,"Builder"],[8,"Service"],[8,"Method"]]},\
"interop":{"doc":"","i":[[3,"Ping","interop","",null,null],[12,"mu","","",0,null],[3,"Pong","","",null,null],[12,"mu","","",1,null],[5,"main","","",null,[[]]],[0,"mu_client","","Generated client implementations.",null,null],[3,"MuClient","interop::mu_client","",null,null],[12,"inner","","",2,null],[11,"new","","",2,[[["client",3],["url",3]],["clientresult",6]]],[11,"mu","","",2,[[]]],[11,"mu_mute","","",2,[[]]],[11,"from","interop","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","interop::mu_client","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"clone","interop","",0,[[],["ping",3]]],[11,"clone","","",1,[[],["pong",3]]],[11,"clone","interop::mu_client","",2,[[],["muclient",3]]],[11,"default","interop","",0,[[]]],[11,"default","","",1,[[]]],[11,"eq","","",0,[[["ping",3]]]],[11,"ne","","",0,[[["ping",3]]]],[11,"eq","","",1,[[["pong",3]]]],[11,"ne","","",1,[[["pong",3]]]],[11,"deref","interop::mu_client","",2,[[]]],[11,"deref_mut","","",2,[[]]],[11,"fmt","interop","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",1,[[["formatter",3]],["result",6]]],[11,"fmt","interop::mu_client","",2,[[["formatter",3]],["result",6]]],[11,"encode_raw","interop","",0,[[]]],[11,"merge_field","","",0,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",0,[[]]],[11,"clear","","",0,[[]]],[11,"encode_raw","","",1,[[]]],[11,"merge_field","","",1,[[["decodecontext",3],["wiretype",4]],[["result",4],["decodeerror",3]]]],[11,"encoded_len","","",1,[[]]],[11,"clear","","",1,[[]]]],"p":[[3,"Ping"],[3,"Pong"],[3,"MuClient"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);