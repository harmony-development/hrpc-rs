var searchIndex = JSON.parse('{\
"hrpc":{"doc":"Common code used in hRPC code generation.","t":[6,4,17,6,6,8,8,13,13,3,3,0,11,11,11,11,11,11,0,14,11,5,5,0,11,11,11,11,11,11,11,11,11,11,14,11,11,11,11,11,10,11,10,11,11,11,11,11,11,11,14,14,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,6,6,5,5,5,3,6,11,11,11,11,11,11,0,11,11,11,5,11,11,11,11,11,0,11,11,11,11,11,4,6,13,13,13,13,13,13,4,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,23,18,18,18,18,18,18,18,18,18,18,18,18,18,18,8,6,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,3,18,18,18,18,18,18,18,18,18,18,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,10,10,11,11,11,11,11,11,11,0,11,11,5,0,0,11,11,11,11,11,11,11,11,11,8,6,6,11,10,5,6,6,6,3,3,3,8,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["BoxError","DecodeBodyError","HRPC_HEADER","HttpRequest","HttpResponse","IntoRequest","IntoResponse","InvalidBody","InvalidProtoMessage","Request","Response","body","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","client","combine_services","empty","encode_protobuf_message","encode_protobuf_message_to","exports","fmt","fmt","fmt","from","from","from","from","from","header_map","header_map_mut","include_proto","into","into","into","into_message","into_message","into_request","into_request","into_response","into_response","into_response","into_response","into_response","new","new","new_body","return_err_as_resp","return_error","server","source","to_string","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","BoxBody","HyperBody","box_body","empty_box_body","full_box_body","Client","HttpClient","borrow","borrow_mut","clone","clone_into","connect_socket","connect_socket_req","error","execute_request","fmt","from","http_client","into","into_response","modify_request_headers_with","new","new_inner","socket","to_owned","try_from","try_into","type_id","vzip","ClientError","ClientResult","ContentNotSupported","EndpointError","FailedRequestBuilder","Http","InvalidScheme","InvalidUrl","InvalidUrlKind","Io","MessageDecode","SocketError","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","into","into","into_response","into_response","source","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip","endpoint","raw_error","status","Socket","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","into_response","is_closed","receive_message","send_message","to_owned","try_from","try_into","type_id","vzip","async_trait","ACCEPTED","ALREADY_REPORTED","BAD_GATEWAY","BAD_REQUEST","CONFLICT","CONTINUE","CREATED","EXPECTATION_FAILED","FAILED_DEPENDENCY","FORBIDDEN","FOUND","GATEWAY_TIMEOUT","GONE","HTTP_VERSION_NOT_SUPPORTED","HeaderMapExt","HrpcLayer","IM_A_TEAPOT","IM_USED","INSUFFICIENT_STORAGE","INTERNAL_SERVER_ERROR","LENGTH_REQUIRED","LOCKED","LOOP_DETECTED","METHOD_NOT_ALLOWED","MISDIRECTED_REQUEST","MOVED_PERMANENTLY","MULTIPLE_CHOICES","MULTI_STATUS","NETWORK_AUTHENTICATION_REQUIRED","NON_AUTHORITATIVE_INFORMATION","NOT_ACCEPTABLE","NOT_EXTENDED","NOT_FOUND","NOT_IMPLEMENTED","NOT_MODIFIED","NO_CONTENT","OK","PARTIAL_CONTENT","PAYLOAD_TOO_LARGE","PAYMENT_REQUIRED","PERMANENT_REDIRECT","PRECONDITION_FAILED","PRECONDITION_REQUIRED","PROCESSING","PROXY_AUTHENTICATION_REQUIRED","RANGE_NOT_SATISFIABLE","REQUEST_HEADER_FIELDS_TOO_LARGE","REQUEST_TIMEOUT","RESET_CONTENT","SEE_OTHER","SERVICE_UNAVAILABLE","SWITCHING_PROTOCOLS","StatusCode","TEMPORARY_REDIRECT","TOO_MANY_REQUESTS","UNAUTHORIZED","UNAVAILABLE_FOR_LEGAL_REASONS","UNPROCESSABLE_ENTITY","UNSUPPORTED_MEDIA_TYPE","UPGRADE_REQUIRED","URI_TOO_LONG","USE_PROXY","VARIANT_ALSO_NEGOTIATES","as_str","as_u16","borrow","borrow_mut","canonical_reason","clone","clone_into","cmp","default","eq","eq","equivalent","error","fmt","fmt","from","from","from_bytes","from_str","from_u16","get_hash","hash","header_contains_str","header_eq","into","into_response","is_client_error","is_informational","is_redirection","is_server_error","is_success","macros","ne","partial_cmp","serve","service","socket","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","type_id","vzip","CustomError","ServerResult","SocketError","as_error_response","as_status_message","json_err_bytes","BoxedHandlerService","BoxedMakeRouterService","CallFuture","Handler","IntoMakeService","LayeredMakeRouter","MakeRouter","MakeRouterStack","Router","RouterBuilder","any","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","call","call","call","combine_with","combine_with","default","from","from","from","from","from","from","into","into","into","into","into","into","into_make_service","into_response","into_response","into_response","into_response","into_response","into_response","layer","layer","layer","make_router","make_router","make_router","new","new","not_found","poll_ready","poll_ready","poll_ready","route","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","vzip","vzip","Socket","borrow","borrow_mut","clone","clone_into","close","fmt","from","into","into_response","is_closed","new","receive_message","send_message","to_owned","try_from","try_into","type_id","vzip"],"q":["hrpc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hrpc::body","","","","","hrpc::client","","","","","","","","","","","","","","","","","","","","","","","","hrpc::client::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hrpc::client::error::ClientError","","","hrpc::client::socket","","","","","","","","","","","","","","","","","","hrpc::exports","hrpc::server","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hrpc::server::error","","","","","","hrpc::server::service","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hrpc::server::socket","","","","","","","","","","","","","","","","","",""],"d":["Alias for a type-erased error type.","","The hRPC protobuf mimetype.","HTTP request used by hRPC.","HTTP response used by hRPC.","Trait used for blanket impls on generated protobuf types.","Trait used for converting any type to a Response type.","","","A hRPC request.","hRPC response type.","Body type.","","","","","","","Common client types and functions.","Combines a list of services that implement <code>MakeRouter</code>.","Create an empty request.","Encodes a protobuf message into a new <code>BytesMut</code> buffer.","Encodes a protobuf message into the given <code>BytesMut</code> buffer.","Some re-exported crates that might be useful while …","","","","","","","","","Get a reference to the inner header map.","Get a mutable reference to the inner header map.","Include generated proto server and client items.","","","","Extract the message this response contains.","","Convert this to a hRPC request.","","Convert this to a hRPC response.","","","","","Create a new hRPC response.","Create a new request with the specified message.","Create a new request with the specified body.","Returns an error as response. Mostly useful for …","Returns an error.","Common server types and functions.","","","","","","","","","","","","","","","A boxed <code>Body</code> trait object.","A <code>hyper::Body</code>, mainly used for <code>Request</code> types.","Convert a <code>http_body::Body</code> into a <code>BoxBody</code>.","","","Generic client implementation with common methods.","A <code>hyper</code> HTTP client that supports HTTPS.","","","","","Connect a socket with the server and return it.","Connect a socket with the server, send a message and …","","Executes an unary request and returns the decoded …","","","Creates a new HttpClient that you can use.","","","Set the function to modify request headers with before …","Creates a new client.","Creates a new client using the provided HttpClient.","","","","","","","Errors that can occur within <code>Client</code> operation.","Convenience type for <code>Client</code> operation result.","Occurs if the data server responded with is not supported …","Occurs if an endpoint returns an error.","Occurs if request creation fails.","Occurs if hyper, the HTTP client, returns an error.","Occurs if URL scheme isn’t <code>http</code> or <code>https</code>.","Occurs if the given URL is invalid.","Errors that can occur while parsing the URL given to …","Occurs if an IO error is returned.","Occurs if the data server responded with can’t be …","Occurs if a websocket returns an error.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A websocket, wrapped for ease of use with protobuf …","","","","","Close the socket.","","","","","Return whether the socket is closed or not.","Receive a message from the socket.","Send a message over the socket.","","","","","","","202 Accepted [RFC7231, Section 6.3.3]","208 Already Reported [RFC5842]","502 Bad Gateway [RFC7231, Section 6.6.3]","400 Bad Request [RFC7231, Section 6.5.1]","409 Conflict [RFC7231, Section 6.5.8]","100 Continue [RFC7231, Section 6.2.1]","201 Created [RFC7231, Section 6.3.2]","417 Expectation Failed [RFC7231, Section 6.5.14]","424 Failed Dependency [RFC4918]","403 Forbidden [RFC7231, Section 6.5.3]","302 Found [RFC7231, Section 6.4.3]","504 Gateway Timeout [RFC7231, Section 6.6.5]","410 Gone [RFC7231, Section 6.5.9]","505 HTTP Version Not Supported [RFC7231, Section 6.6.6]","Helper methods for working with <code>HeaderMap</code>.","","418 I’m a teapot [curiously not registered by IANA but …","226 IM Used [RFC3229]","507 Insufficient Storage [RFC4918]","500 Internal Server Error [RFC7231, Section 6.6.1]","411 Length Required [RFC7231, Section 6.5.10]","423 Locked [RFC4918]","508 Loop Detected [RFC5842]","405 Method Not Allowed [RFC7231, Section 6.5.5]","421 Misdirected Request RFC7540, Section 9.1.2","301 Moved Permanently [RFC7231, Section 6.4.2]","300 Multiple Choices [RFC7231, Section 6.4.1]","207 Multi-Status [RFC4918]","511 Network Authentication Required [RFC6585]","203 Non-Authoritative Information [RFC7231, Section 6.3.4]","406 Not Acceptable [RFC7231, Section 6.5.6]","510 Not Extended [RFC2774]","404 Not Found [RFC7231, Section 6.5.4]","501 Not Implemented [RFC7231, Section 6.6.2]","304 Not Modified [RFC7232, Section 4.1]","204 No Content [RFC7231, Section 6.3.5]","200 OK [RFC7231, Section 6.3.1]","206 Partial Content [RFC7233, Section 4.1]","413 Payload Too Large [RFC7231, Section 6.5.11]","402 Payment Required [RFC7231, Section 6.5.2]","308 Permanent Redirect [RFC7238]","412 Precondition Failed [RFC7232, Section 4.2]","428 Precondition Required [RFC6585]","102 Processing [RFC2518]","407 Proxy Authentication Required [RFC7235, Section 3.2]","416 Range Not Satisfiable [RFC7233, Section 4.4]","431 Request Header Fields Too Large [RFC6585]","408 Request Timeout [RFC7231, Section 6.5.7]","205 Reset Content [RFC7231, Section 6.3.6]","303 See Other [RFC7231, Section 6.4.4]","503 Service Unavailable [RFC7231, Section 6.6.4]","101 Switching Protocols [RFC7231, Section 6.2.2]","An HTTP status code (<code>status-code</code> in RFC 7230 et al.).","307 Temporary Redirect [RFC7231, Section 6.4.7]","429 Too Many Requests [RFC6585]","401 Unauthorized [RFC7235, Section 3.1]","451 Unavailable For Legal Reasons [RFC7725]","422 Unprocessable Entity [RFC4918]","415 Unsupported Media Type [RFC7231, Section 6.5.13]","426 Upgrade Required [RFC7231, Section 6.5.15]","414 URI Too Long [RFC7231, Section 6.5.12]","305 Use Proxy [RFC7231, Section 6.4.5]","506 Variant Also Negotiates [RFC2295]","Returns a &str representation of the <code>StatusCode</code>","Returns the <code>u16</code> corresponding to this <code>StatusCode</code>.","","","Get the standardised <code>reason-phrase</code> for this status code.","","","","","","","","","","","","","Converts a &u8 to a status code","","Converts a u16 to a status code.","","","Check if a header contains a string.","Check if a header is equal to a bytes array.","","","Check if status is within 400-499.","Check if status is within 100-199.","Check if status is within 300-399.","Check if status is within 500-599.","Check if status is within 200-299.","","","","Start serving.","","","","","","","","","","","","Trait that needs to be implemented to use an error type …","Shorthand type for `Result<T, ServerError>.","Socket error.","","Status code and message that will be used in client …","Creates a JSON error response from a message.","","","Call future used by Handler.","hRPC handler service type.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A web socket.","","","","","Close the socket.","","","","","Return whether the socket is closed or not.","","Receive a message from the socket.","Send a message over the socket.","","","","",""],"i":[0,0,0,0,0,0,0,1,1,0,0,0,2,3,1,2,3,1,0,0,3,0,0,0,3,1,1,2,2,2,3,1,3,3,0,2,3,1,2,3,4,3,5,2,2,3,1,2,3,3,0,0,0,1,1,2,3,1,2,3,1,2,3,1,2,3,1,0,0,0,0,0,0,0,6,6,6,6,6,6,0,6,6,6,0,6,6,6,6,6,0,6,6,6,6,6,0,0,7,7,7,7,8,7,0,7,7,7,7,8,7,8,7,7,8,8,7,7,7,7,7,7,8,7,8,7,8,7,7,8,7,8,7,8,7,8,7,8,9,9,9,0,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,0,11,11,0,0,0,11,11,11,11,11,11,11,11,11,0,0,0,13,13,0,0,0,0,0,0,0,0,0,0,0,14,15,14,16,17,18,19,15,14,16,17,18,19,14,15,16,19,14,20,14,15,14,16,17,18,19,15,14,16,17,18,19,20,15,14,16,17,18,19,15,14,20,20,17,18,15,14,0,15,16,19,14,15,14,16,17,18,19,15,14,16,17,18,19,15,14,16,17,18,19,15,14,16,17,18,19,0,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21,21],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["request",3]],[[],["bytesmut",3]],[[["bytesmut",3]]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[],["headermap",3]],[[],["headermap",3]],null,[[]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["response",3]],[[],["response",3]],[[],["response",3]],[[],["response",3]],[[],["response",3]],[[],["response",3]],[[]],[[["hyperbody",6]]],null,null,null,[[],[["option",4,["stderror"]],["stderror",8]]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],null,null,[[],["boxbody",6]],[[],["boxbody",6]],[[["bytes",3]],["boxbody",6]],null,null,[[]],[[]],[[],["client",3]],[[]],[[["str",15],["request",3]]],[[["str",15],["request",3]]],null,[[["str",15],["message",8],["request",3]]],[[["formatter",3]],["result",6]],[[]],[[],["httpclient",6]],[[]],[[],["response",3]],[[["arc",3,["fn"]],["fn",8]]],[[["uri",3]],["clientresult",6]],[[["uri",3],["httpclient",6]],["clientresult",6]],null,[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["error",3]]],[[["bodyorioerror",4,["error"]],["error",3]]],[[["error",4]]],[[["decodebodyerror",4]]],[[["error",3]]],[[]],[[]],[[]],[[]],[[],["response",3]],[[],["response",3]],[[],[["option",4,["stderror"]],["stderror",8]]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],null,null,null,null,[[]],[[]],[[],["socket",3]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["response",3]],[[],["bool",15]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["str",15]],[[],["u16",15]],[[]],[[]],[[],[["str",15],["option",4,["str"]]]],[[],["statuscode",3]],[[]],[[["statuscode",3]],["ordering",4]],[[],["statuscode",3]],[[["u16",15]],["bool",15]],[[["statuscode",3]],["bool",15]],[[],["bool",15]],null,[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["statuscode",3]],["statuscode",3]],[[]],[[],[["result",4,["statuscode","invalidstatuscode"]],["statuscode",3],["invalidstatuscode",3]]],[[["str",15]],[["result",4,["statuscode","invalidstatuscode"]],["statuscode",3],["invalidstatuscode",3]]],[[["u16",15]],[["result",4,["statuscode","invalidstatuscode"]],["statuscode",3],["invalidstatuscode",3]]],[[],["u64",15]],[[]],[[["headername",3],["str",15]],["bool",15]],[[["headername",3]],["bool",15]],[[]],[[],["response",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],null,[[["statuscode",3]],["bool",15]],[[["statuscode",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],null,null,[[]],[[],["string",3]],[[["str",15]],[["result",4,["statuscode"]],["statuscode",3]]],[[["u16",15]],[["statuscode",3],["result",4,["statuscode"]]]],[[],[["statuscode",3],["result",4,["statuscode"]]]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,null,[[],["httpresponse",6]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["router",3]],[[["httprequest",6]]],[[["httprequest",6]]],[[]],[[]],[[],["makerouterstack",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["intomakeservice",3]],[[],["response",3]],[[],["response",3]],[[],["response",3]],[[],["response",3]],[[],["response",3]],[[],["response",3]],[[]],[[]],[[],["layeredmakerouter",3]],[[],["routerbuilder",3]],[[],["routerbuilder",3]],[[],["routerbuilder",3]],[[]],[[]],[[],["handler",3]],[[["context",3]],[["result",4],["poll",4,["result"]]]],[[["context",3]],[["result",4],["poll",4,["result"]]]],[[["context",3]],[["result",4],["poll",4,["result"]]]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[],["response",3]],[[],["bool",15]],[[["websocket",3]]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"DecodeBodyError"],[3,"Response"],[3,"Request"],[8,"IntoRequest"],[8,"IntoResponse"],[3,"Client"],[4,"ClientError"],[4,"InvalidUrlKind"],[13,"EndpointError"],[3,"Socket"],[3,"StatusCode"],[8,"HeaderMapExt"],[8,"CustomError"],[3,"RouterBuilder"],[3,"Handler"],[3,"Router"],[3,"LayeredMakeRouter"],[3,"MakeRouterStack"],[3,"IntoMakeService"],[8,"MakeRouter"],[3,"Socket"]]},\
"hrpc_build":{"doc":"","t":[3,16,16,8,16,8,11,11,11,11,0,10,11,11,10,10,11,5,11,5,11,11,5,11,11,11,10,10,11,10,10,10,10,11,10,11,10,0,10,11,11,11,11,11,11,5,5],"n":["Builder","Comment","Comment","Method","Method","Service","borrow","borrow_mut","build_client","build_server","client","client_streaming","clone","clone_into","comment","comment","compile","compile_protos","compile_with_config","configure","extern_path","field_attribute","fmt","fmt","format","from","identifier","identifier","into","methods","name","name","options","out_dir","package","proto_path","request_response_name","server","server_streaming","to_owned","try_from","try_into","type_attribute","type_id","vzip","generate","generate"],"q":["hrpc_build","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","hrpc_build::client","hrpc_build::server"],"d":["Service generator builder.","Comment type.","Comment type.","Method generation trait.","Method type.","Service generation trait.","","","Enable or disable hRPC client code generation.","Enable or disable hRPC server code generation.","Service code generation for client","Method is streamed by client.","","","Get comments about this item.","Get comments about this item.","Compile the .proto files and execute code generation.","Simple <code>.proto</code> compiling. Use <code>configure</code> instead if you …","Compile the .proto files and execute code generation …","Configure <code>hrpc-build</code> code generation.","Declare externally provided Protobuf package or type.","Add additional attribute to matched messages, enums, and …","Format files under the out_dir with rustfmt","","Enable the output to be formated by rustfmt.","","Identifier used to generate type name.","Identifier used to generate type name.","","Methods provided by service.","Name of service.","Name of method.","Get options of this item.","Set the output directory to generate code to.","Package name of service.","Set the path to where tonic will search for the …","Type name of request and response.","Service code generation for server","Method is streamed by server.","","","","Add additional attribute to matched messages, enums, and …","","","Generate service for client.","Generate service for Server."],"i":[0,1,2,0,1,0,3,3,3,3,0,2,3,3,1,2,3,0,3,0,3,3,0,3,3,3,1,2,3,1,1,2,2,3,1,3,2,0,2,3,3,3,3,3,3,0,0],"f":[null,null,null,null,null,null,[[]],[[]],[[["bool",15]]],[[["bool",15]]],null,[[],["bool",15]],[[],["builder",3]],[[]],[[]],[[]],[[],["result",6]],[[],["result",6]],[[["config",3]],["result",6]],[[],["builder",3]],[[]],[[["str",15],["asref",8,["str"]]]],[[["str",15]]],[[["formatter",3]],["result",6]],[[["bool",15]]],[[]],[[],["str",15]],[[],["str",15]],[[]],[[]],[[],["str",15]],[[],["str",15]],[[],["vec",3]],[[]],[[],["str",15]],[[]],[[["str",15]]],null,[[],["bool",15]],[[]],[[],["result",4]],[[],["result",4]],[[["str",15],["asref",8,["str"]]]],[[],["typeid",3]],[[]],[[["str",15]],["tokenstream",3]],[[["str",15]],["tokenstream",3]]],"p":[[8,"Service"],[8,"Method"],[3,"Builder"]]},\
"interop":{"doc":"","t":[3,13,3,3,4,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,12,12,0,11,11,11,11,0,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,8,3,11,11,11,11,11,11,12,11,11,11,10,11,10,11,11,10,11,11,11,11,11,11,11,11,11],"n":["Ping","PingEmpty","Pong","Server","ServerError","as_status_message","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clear","clear","client","clone","clone","clone","clone_into","clone_into","clone_into","default","default","encode_raw","encode_raw","encoded_len","encoded_len","eq","eq","fmt","fmt","fmt","fmt","fmt","from","from","from","from","into","into","into","into","into_request","into_request","into_response","into_response","into_response","into_response","main","merge_field","merge_field","mu","mu","mu","mu_client","mu_mu","mu_mute","mu_mute_middleware","mu_mute_on_upgrade","mu_server","ne","ne","server","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","vzip","vzip","vzip","vzip","MuClient","borrow","borrow_mut","clone","clone_into","fmt","from","inner","inner","into","into_response","mu","mu_mu","mu_mute","new","new_http","new_inner","to_owned","try_from","try_into","type_id","vzip","Mu","MuServer","borrow","borrow_mut","clone","clone_into","fmt","from","inner","into","into_response","make_router","mu","mu_middleware","mu_mu","mu_mu_middleware","mu_mu_on_upgrade","mu_mute","mu_mute_middleware","mu_mute_on_upgrade","new","serve","to_owned","try_from","try_into","type_id","vzip"],"q":["interop","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","interop::mu_client","","","","","","","","","","","","","","","","","","","","","","interop::mu_server","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Ping message.","","Pong message.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Generated client implementations.","","","","","Generated server implementations.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Mu RPC.","MuMu RPC. ``` test ```","MuMute RPC.","","","","","","","","","Generated trait containing hRPC methods that should be …","","","","","","","","","","","","Mu RPC.","Filter to be run before all API operations but after API …","MuMu RPC. ``` test ```","Filter to be run before all API operations but after API …","Method that can be used to modify the response sent when …","MuMute RPC.","Filter to be run before all API operations but after API …","Method that can be used to modify the response sent when …","Create a new service server.","Start serving.","","","","",""],"i":[0,1,0,0,0,1,2,3,4,1,2,3,4,1,2,3,0,2,3,4,2,3,4,2,3,2,3,2,3,2,3,2,3,4,1,1,2,3,4,1,2,3,4,1,2,3,2,3,4,1,0,2,3,4,2,3,0,4,4,4,4,0,2,3,0,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,2,3,4,1,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,6,6,6,6,6,6,6,6,6,6,7,7,7,7,7,7,7,7,6,6,6,6,6,6,6],"f":[null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["ping",3]],[[],["pong",3]],[[],["server",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[["ping",3]],["bool",15]],[[["pong",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["request",3]],[[],["request",3]],[[],["response",3]],[[],["response",3]],[[],["response",3]],[[],["response",3]],[[]],[[["decodecontext",3],["u32",15],["wiretype",4]],[["result",4,["decodeerror"]],["decodeerror",3]]],[[["decodecontext",3],["u32",15],["wiretype",4]],[["result",4,["decodeerror"]],["decodeerror",3]]],[[["ping",3],["request",3,["ping"]]],[["pin",3,["box"]],["box",3,["future"]]]],null,null,null,[[["request",3],["pong",3],["socket",3,["ping","pong"]],["ping",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["request",3],["pong",3],["socket",3,["ping","pong"]],["ping",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["str",15]],["hrpclayer",6]],[[["httpresponse",6]],["httpresponse",6]],null,[[["ping",3]],["bool",15]],[[["pong",3]],["bool",15]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],[[]],[[]],[[]],null,[[]],[[]],[[],["muclient",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[],["client",3]],null,[[]],[[],["response",3]],[[]],[[]],[[]],[[["uri",3]],["clientresult",6]],[[["httpclient",6],["uri",3]],["clientresult",6]],[[["client",3]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]],null,null,[[]],[[]],[[]],[[]],[[["formatter",3]],["result",6]],[[]],null,[[]],[[],["response",3]],[[],["routerbuilder",3]],[[["ping",3],["hrpcrequest",3,["ping"]]],[["pin",3,["box"]],["box",3,["future"]]]],[[["str",15]],["hrpclayer",6]],[[["hrpcrequest",3],["pong",3],["socket",3,["ping","pong"]],["ping",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["str",15]],["hrpclayer",6]],[[["httpresponse",6]],["httpresponse",6]],[[["hrpcrequest",3],["pong",3],["socket",3,["ping","pong"]],["ping",3]],[["pin",3,["box"]],["box",3,["future"]]]],[[["str",15]],["hrpclayer",6]],[[["httpresponse",6]],["httpresponse",6]],[[]],[[["into",8,["socketaddr"]],["socketaddr",4]]],[[]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[]]],"p":[[4,"ServerError"],[3,"Ping"],[3,"Pong"],[3,"Server"],[3,"MuClient"],[3,"MuServer"],[8,"Mu"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};